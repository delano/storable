#!/bin/bash

#
# Create docker containers by ruby version
#
#   Environment variables (with example values):
#
#     NAME=tryouts
#     CONTAINER_SHELL=/bin/sh
#     RUN_HOME=/run/host-services
#     VERSION=2.6.6
#     IMAGE="${NAME}-${VERSION}"
#     NOCACHE=0
#
#   And expects from the system:
#
#     SHELL
#
#
#   Usage:
#
#     $ bin/tryouts
#     $ VERSION=2.6.6 bin/tryouts
#     $ NOCACHE=1 bin/tryouts
#
#   Generating a private-public keypair (optional):
#
#     $ openssl req -newkey rsa:2048 \
#         -new -nodes -x509 -days 90 \
#         -keyout $DOCKER_HOME/serverkey.pem \
#         -out $DOCKER_HOME/server.pem
#

# Shorthand for establishing an env vars with sane
# defaults, while allowing the outside caller to
# specific their own override values.
: ${NAME:=tryouts}
: ${CONTAINER_SHELL:=/bin/bash}
: ${RUN_HOME:=/run/host-services}
: ${VERSION:=2.6.6}
: ${NOCACHE:=''}
: ${CODE_HOME:=/code}
: ${DOCKER_HOME:=$HOME/.docker}
: ${ENTRY_FORM:=$CODE_HOME/bin/docker-entrypoint.sh}

# Use consistent image name so we only build when
# necessary; container name too for familiarity.
CONTAINER="${NAME}-${VERSION}"
IMAGE="img-${VERSION}"
COMMAND="$CONTAINER_SHELL $ENTRY_FORM $@ apples"

# Pass --no-cache to docker if requested
if [ -n "$NOCACHE" ]; then
  NOCACHE=--no-cache
fi

# Build a fresh image with the requested settings
docker build \
  -t $IMAGE $NOCACHE \
  --build-arg VERSION=$VERSION \
  --build-arg CONTAINER_SHELL=$CONTAINER_SHELL .

# Fast-fail if the build doesn't complete
if [ $? -ne 0 ]; then
  echo "Sorry kid, maybe next time"
  exit $?
fi

# Run the container with ssh-agent key forwarding
# using the current working directory as the
# application path inside the container. We
# also pass all arguments through to the
# entry form so the start-time script
# logic can be modified.
echo "Command: ${COMMAND}"
docker run \
  --name $CONTAINER \
  -it --volume ${PWD}:/code --rm \
  -v $RUN_HOME/ssh-auth.sock:$RUN_HOME/ssh-auth.sock \
  -e SSH_AUTH_SOCK="$RUN_HOME/ssh-auth.sock" \
  $IMAGE $COMMAND

#
# export NAME=tryouts IMAGE=img-2.6.6 RUN_HOME=/run/host-services
# echo docker run \
#   --name $NAME \
#   -it --volume ${PWD}:/code \
#   --rm -v $RUN_HOME/ssh-auth.sock:$RUN_HOME/ssh-auth.sock \
#   -e SSH_AUTH_SOCK="$RUN_HOME/ssh-auth.sock" \
#   $IMAGE $CONTAINER_SHELL
#
